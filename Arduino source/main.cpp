/*Led matrix controller
 * Mitron 32x10 (32x12) led matrix
 * controlled with 4bit row select lines and 32bit line shift register
 */
#include <avr/pgmspace.h>
//Shift register pins
const int latchPin = 8; 
const int clockPin = 12; 
const int dataPin = 11;
const int enablePin = 9; //enables output, prevents ghosting while data loaded

const int multiplexPin[] = {2,3,4,5}; //Row decoder pins, 0-11 dec values corresponds lines, 1-10 usable as 0 and 11 lines are missing leds
const int pwmPin = 6; //for led driver current control, 255 gives 2A/led panel!
int pwm = 20;

const int framerate = 24; //exponent of 2, slows display down, as it runs 60-80fps

//image data from kukkaconvert.exe by wuffe goes here, put in PROGMEM to save ram
const unsigned int imageWidth = 2336;
const unsigned long imageData[876] PROGMEM  = {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xa506c14a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x42105084, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x5a2828b4, 0xa506c14a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x81282102, 0x42105084, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x242fe848, 0x5a2828b4, 0xa506c14a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x5a3ff0b4, 0x81282102, 0x42105084, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xff3ff9fe, 0x242fe848, 0x5a2828b4, 0xa506c14a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xff3ff9fe, 0x5a3ff0b4, 0x81282102, 0x42105084, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xdb1bb1b6, 0xff3ff9fe, 0x242fe848, 0x5a2828b4, 0xa506c14a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0xdb3bb9b6, 0xff3ff9fe, 0x5a3ff0b4, 0x81282102, 0x42105084, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x7e0fe0fc, 0xdb1bb1b6, 0xff3ff9fe, 0x242fe848, 0x5a2828b4, 0xa506c14a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x7e2fe8fc, 0xdb3bb9b6, 0xff3ff9fe, 0x5a3ff0b4, 0x81282102, 0x42105084, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x3c044078, 0x7e0fe0fc, 0xdb1bb1b6, 0xff3ff9fe, 0x242fe848, 0x5a2828b4, 0xa506c14a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x3c244878, 0x7e2fe8fc, 0xdb3bb9b6, 0xff3ff9fe, 0x5a3ff0b4, 0x81282102, 0x42105084, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x18082030, 0x3c044078, 0x7e0fe0fc, 0xdb1bb1b6, 0xff3ff9fe, 0x242fe848, 0x5a2828b4, 0xa506c14a, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x18082030, 0x3c244878, 0x7e2fe8fc, 0xdb3bb9b6, 0xff3ff9fe, 0x5a3ff0b4, 0x81282102, 0x42105084, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x18082030, 0x3c044078, 0x7e0fe0fc, 0xdb1bb1b6, 0xff3ff9fe, 0x242fe848, 0x5a2828b4, 0xa506c14a, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x18082030, 0x3c244878, 0x7e2fe8fc, 0xdb3bb9b6, 0xff3ff9fe, 0x5a3ff0b4, 0x81282102, 0x42105084, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c044078, 0x7e0fe0fc, 0xdb1bb1b6, 0xff3ff9fe, 0x242fe848, 0x5a2828b4, 0xa506c14a, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c244878, 0x7e2fe8fc, 0xdb3bb9b6, 0xff3ff9fe, 0x5a3ff0b4, 0x81282102, 0x42105084, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c044078, 0x7e0fe0fc, 0xdb1bb1b6, 0xff3ff9fe, 0x242fe848, 0x5a2828b4, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c244878, 0x7e2fe8fc, 0xdb3bb9b6, 0xff3ff9fe, 0x5a3ff0b4, 0x81282102, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c044078, 0x7e0fe0fc, 0xdb1bb1b6, 0xff3ff9fe, 0x242fe848, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c244878, 0x7e2fe8fc, 0xdb3bb9b6, 0xff3ff9fe, 0x5a3ff0b4, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c044078, 0x7e0fe0fc, 0xdb1bb1b6, 0xff3ff9fe, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c244878, 0x7e2fe8fc, 0xdb3bb9b6, 0xff3ff9fe, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c044078, 0x7e0fe0fc, 0xdb1bb1b6, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c244878, 0x7e2fe8fc, 0xdb3bb9b6, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c044078, 0x7e0fe0fc, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c244878, 0x7e2fe8fc, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c044078, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x3c244878, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x18082030, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x000c3000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00300c00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00666000, 0x0030c000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x0036e000, 0x00c03000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x000e7000, 0x00199800, 0x000c3000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x000e7000, 0x000db800, 0x00300c00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x003ffc00, 0x000e7000, 0x00199800, 0x000c3000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x003ffc00, 0x000e7000, 0x000db800, 0x00300c00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00199800, 0x000c3000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00399c00, 0x003ffc00, 0x000e7000, 0x000db800, 0x00300c00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00199800, 0x000c3000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x000db800, 0x00300c00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00199800, 0x000c3000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x000db800, 0x00300c00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00199800, 0x000c3000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x000db800, 0x00300c00, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00199800, 0x000c3000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x000db800, 0x00300c00, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00199800, 0x000c3000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x000db800, 0x00300c00, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00199800, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x000db800, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x000e7000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x003ffc00, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00399c00, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x001ff800, 0x003ffc00, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00078000, 0x003ff000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00078000, 0x003ff000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003c000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
};

void setup() { //Set pins to outputs and inits other stuff
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(enablePin, OUTPUT);
  for (int i = 0; i<4; i++){
    pinMode(multiplexPin[i], OUTPUT);
  }
  Serial.begin(9600);
  analogWrite(pwmPin, pwm); 
}

void loop() {
  setBrightness(); //set brightness from serial port input, for testing purposes
  
  for (int frame = 0; frame < (imageWidth/32)*framerate; frame++){  //main loop, that throws image data frame by frame, row by row
    for (byte row =1; row<=10; row++){                              //Displaythingy happens here, select row, put column data in, change row, start again...
      shiftOut32(getRowWord((frame/framerate)*32, row, imageWidth, imageData)); //Shifts one line per row with selected frame and row data
      multiplexRow(row);               //Selects next row
     }      
  } 
}

void multiplexRow(byte multiRow){  //Selects which row gets illuminated, 0-11 in four bits, 1-10 usable as display
  for (int i =0;i<4;i++){
    if (bitRead(multiRow, i)==1){
      digitalWrite(multiplexPin[i], HIGH);
    }
    else{
      digitalWrite(multiplexPin[i], LOW);
    }
  }
}

void setBrightness(){
  while (Serial.available() > 0) { //Reads serial port and sets pwm value
    int pwm = Serial.parseInt();
    if (Serial.read() == '\n') {
      Serial.print("PWM is set at "); Serial.println(pwm);
      analogWrite(pwmPin, pwm);
    }
  }
}

void shiftOut32(unsigned long input){ //32Bit shift out, sends data in 8bit pieces to shift register
  digitalWrite(latchPin, LOW);
  digitalWrite(enablePin, LOW);
  shiftOut(dataPin, clockPin, LSBFIRST, input >> 0);
  shiftOut(dataPin, clockPin, LSBFIRST, input >> 8);
  shiftOut(dataPin, clockPin, LSBFIRST, input >> 16);
  shiftOut(dataPin, clockPin, LSBFIRST, input >> 24);
  digitalWrite(enablePin, HIGH); 
  digitalWrite(latchPin, HIGH); 
}

const unsigned long getRowWord(const unsigned int x, unsigned const int y, const unsigned int width, const unsigned long* data) {  //getRowWord by wuffe, all cool stuff happens here
    // Huomaa että x:n jakojäännökset saattavat olla hitaita, jos kääntäjä ei pysty mitenkään 
    // kääntäessä ennalta päättelemään, minkä arvon width saa funktiota kutsuttaessa.
    const unsigned int xa = x % width;
    const unsigned int xb = (x + 32) % width;
    const unsigned int ya = y % 12;
    const unsigned int shift = xa % 32;
    
    const unsigned int aPtr = ya + (xa / 32) * 12;
    const unsigned int bPtr = ya + (xb / 32) * 12;
    
    // Konditionaali, ettei tulisi shiftattua 32:lla 32-bittistä muuttujaa (ei määritelty, ainakaan C:ssä).
    // return shift == 0 ? data[aPtr] : ((data[aPtr] << shift) | (data[bPtr] >> (32 - shift)));
    return shift == 0 ? pgm_read_dword(data + aPtr) : ((pgm_read_dword(data + aPtr) << shift) | (pgm_read_dword(data + bPtr) >> (32 - shift)));
}
